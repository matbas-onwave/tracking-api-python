# coding: utf-8

"""
    TrackingAPI

    API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from lb_tracking_api.configuration import Configuration


class Datapoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location': 'GeoPoint',
        'timestamp': 'datetime',
        'speed': 'float',
        'altitude': 'float',
        'course': 'float',
        'num_value': 'str',
        'string_value': 'str',
        'send_reason': 'float',
        'sats': 'float',
        'hdop': 'float',
        'accuracy': 'float',
        'location_type': 'str',
        'battery_pct': 'float',
        'battery_voltage': 'float',
        'average_charge': 'float',
        'created': 'datetime',
        'address': 'str',
        'alert_type': 'float',
        'current_used': 'float',
        'gsm_signal': 'float',
        'correlation_id': 'str',
        'id': 'float',
        'device_id': 'float'
    }

    attribute_map = {
        'location': 'location',
        'timestamp': 'timestamp',
        'speed': 'speed',
        'altitude': 'altitude',
        'course': 'course',
        'num_value': 'num_value',
        'string_value': 'stringValue',
        'send_reason': 'sendReason',
        'sats': 'sats',
        'hdop': 'hdop',
        'accuracy': 'accuracy',
        'location_type': 'locationType',
        'battery_pct': 'batteryPct',
        'battery_voltage': 'batteryVoltage',
        'average_charge': 'averageCharge',
        'created': 'created',
        'address': 'address',
        'alert_type': 'alertType',
        'current_used': 'currentUsed',
        'gsm_signal': 'gsmSignal',
        'correlation_id': 'correlationId',
        'id': 'id',
        'device_id': 'deviceId'
    }

    def __init__(self, location=None, timestamp=None, speed=None, altitude=None, course=None, num_value=None, string_value=None, send_reason=None, sats=None, hdop=None, accuracy=None, location_type='gps', battery_pct=None, battery_voltage=None, average_charge=None, created=None, address=None, alert_type=None, current_used=None, gsm_signal=None, correlation_id=None, id=None, device_id=None, _configuration=None):  # noqa: E501
        """Datapoint - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._location = None
        self._timestamp = None
        self._speed = None
        self._altitude = None
        self._course = None
        self._num_value = None
        self._string_value = None
        self._send_reason = None
        self._sats = None
        self._hdop = None
        self._accuracy = None
        self._location_type = None
        self._battery_pct = None
        self._battery_voltage = None
        self._average_charge = None
        self._created = None
        self._address = None
        self._alert_type = None
        self._current_used = None
        self._gsm_signal = None
        self._correlation_id = None
        self._id = None
        self._device_id = None
        self.discriminator = None

        if location is not None:
            self.location = location
        self.timestamp = timestamp
        if speed is not None:
            self.speed = speed
        if altitude is not None:
            self.altitude = altitude
        if course is not None:
            self.course = course
        if num_value is not None:
            self.num_value = num_value
        if string_value is not None:
            self.string_value = string_value
        if send_reason is not None:
            self.send_reason = send_reason
        if sats is not None:
            self.sats = sats
        if hdop is not None:
            self.hdop = hdop
        if accuracy is not None:
            self.accuracy = accuracy
        self.location_type = location_type
        if battery_pct is not None:
            self.battery_pct = battery_pct
        if battery_voltage is not None:
            self.battery_voltage = battery_voltage
        if average_charge is not None:
            self.average_charge = average_charge
        self.created = created
        if address is not None:
            self.address = address
        if alert_type is not None:
            self.alert_type = alert_type
        if current_used is not None:
            self.current_used = current_used
        if gsm_signal is not None:
            self.gsm_signal = gsm_signal
        if correlation_id is not None:
            self.correlation_id = correlation_id
        if id is not None:
            self.id = id
        if device_id is not None:
            self.device_id = device_id

    @property
    def location(self):
        """Gets the location of this Datapoint.  # noqa: E501


        :return: The location of this Datapoint.  # noqa: E501
        :rtype: GeoPoint
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Datapoint.


        :param location: The location of this Datapoint.  # noqa: E501
        :type: GeoPoint
        """

        self._location = location

    @property
    def timestamp(self):
        """Gets the timestamp of this Datapoint.  # noqa: E501

        Timestamp for the datapoint. NB this is not necessarily the same as 'created'  # noqa: E501

        :return: The timestamp of this Datapoint.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Datapoint.

        Timestamp for the datapoint. NB this is not necessarily the same as 'created'  # noqa: E501

        :param timestamp: The timestamp of this Datapoint.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def speed(self):
        """Gets the speed of this Datapoint.  # noqa: E501

        Ground velocity in kmh, as determined by the GPS  # noqa: E501

        :return: The speed of this Datapoint.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this Datapoint.

        Ground velocity in kmh, as determined by the GPS  # noqa: E501

        :param speed: The speed of this Datapoint.  # noqa: E501
        :type: float
        """

        self._speed = speed

    @property
    def altitude(self):
        """Gets the altitude of this Datapoint.  # noqa: E501

        Altitude in m, as determined by the GPS  # noqa: E501

        :return: The altitude of this Datapoint.  # noqa: E501
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this Datapoint.

        Altitude in m, as determined by the GPS  # noqa: E501

        :param altitude: The altitude of this Datapoint.  # noqa: E501
        :type: float
        """

        self._altitude = altitude

    @property
    def course(self):
        """Gets the course of this Datapoint.  # noqa: E501

        Course in degrees, as determined by the GPS  # noqa: E501

        :return: The course of this Datapoint.  # noqa: E501
        :rtype: float
        """
        return self._course

    @course.setter
    def course(self, course):
        """Sets the course of this Datapoint.

        Course in degrees, as determined by the GPS  # noqa: E501

        :param course: The course of this Datapoint.  # noqa: E501
        :type: float
        """

        self._course = course

    @property
    def num_value(self):
        """Gets the num_value of this Datapoint.  # noqa: E501

        Internal use only  # noqa: E501

        :return: The num_value of this Datapoint.  # noqa: E501
        :rtype: str
        """
        return self._num_value

    @num_value.setter
    def num_value(self, num_value):
        """Sets the num_value of this Datapoint.

        Internal use only  # noqa: E501

        :param num_value: The num_value of this Datapoint.  # noqa: E501
        :type: str
        """

        self._num_value = num_value

    @property
    def string_value(self):
        """Gets the string_value of this Datapoint.  # noqa: E501

        Internal use only  # noqa: E501

        :return: The string_value of this Datapoint.  # noqa: E501
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this Datapoint.

        Internal use only  # noqa: E501

        :param string_value: The string_value of this Datapoint.  # noqa: E501
        :type: str
        """

        self._string_value = string_value

    @property
    def send_reason(self):
        """Gets the send_reason of this Datapoint.  # noqa: E501

        Bitfield indicating reason for datapoint transmission and status of the device at the time.   Bit1(1): Wake mode active,    Bit2(2): Sleep mode active,    Bit3(4): Bluetooth disconnected,    Bit4(8): Outside of Safe-zone,    Bit5(16): Motion detected,    Bit6(32): Device started moving,    Bit7(64): Device stopped moving,    Bit8(128): Position is stale: last known location was used   Special case 255/0xFF: device was checking in with server. Ignore all data  # noqa: E501

        :return: The send_reason of this Datapoint.  # noqa: E501
        :rtype: float
        """
        return self._send_reason

    @send_reason.setter
    def send_reason(self, send_reason):
        """Sets the send_reason of this Datapoint.

        Bitfield indicating reason for datapoint transmission and status of the device at the time.   Bit1(1): Wake mode active,    Bit2(2): Sleep mode active,    Bit3(4): Bluetooth disconnected,    Bit4(8): Outside of Safe-zone,    Bit5(16): Motion detected,    Bit6(32): Device started moving,    Bit7(64): Device stopped moving,    Bit8(128): Position is stale: last known location was used   Special case 255/0xFF: device was checking in with server. Ignore all data  # noqa: E501

        :param send_reason: The send_reason of this Datapoint.  # noqa: E501
        :type: float
        """

        self._send_reason = send_reason

    @property
    def sats(self):
        """Gets the sats of this Datapoint.  # noqa: E501

        Number of visible satellites, as determined by the GPS  # noqa: E501

        :return: The sats of this Datapoint.  # noqa: E501
        :rtype: float
        """
        return self._sats

    @sats.setter
    def sats(self, sats):
        """Sets the sats of this Datapoint.

        Number of visible satellites, as determined by the GPS  # noqa: E501

        :param sats: The sats of this Datapoint.  # noqa: E501
        :type: float
        """

        self._sats = sats

    @property
    def hdop(self):
        """Gets the hdop of this Datapoint.  # noqa: E501

        Deprecated  # noqa: E501

        :return: The hdop of this Datapoint.  # noqa: E501
        :rtype: float
        """
        return self._hdop

    @hdop.setter
    def hdop(self, hdop):
        """Sets the hdop of this Datapoint.

        Deprecated  # noqa: E501

        :param hdop: The hdop of this Datapoint.  # noqa: E501
        :type: float
        """

        self._hdop = hdop

    @property
    def accuracy(self):
        """Gets the accuracy of this Datapoint.  # noqa: E501

        Accuracy of the location in meters  # noqa: E501

        :return: The accuracy of this Datapoint.  # noqa: E501
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this Datapoint.

        Accuracy of the location in meters  # noqa: E501

        :param accuracy: The accuracy of this Datapoint.  # noqa: E501
        :type: float
        """

        self._accuracy = accuracy

    @property
    def location_type(self):
        """Gets the location_type of this Datapoint.  # noqa: E501

        Type of position. Can be 'gps', 'wifi', 'gsm' or 'invalid'  # noqa: E501

        :return: The location_type of this Datapoint.  # noqa: E501
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this Datapoint.

        Type of position. Can be 'gps', 'wifi', 'gsm' or 'invalid'  # noqa: E501

        :param location_type: The location_type of this Datapoint.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and location_type is None:
            raise ValueError("Invalid value for `location_type`, must not be `None`")  # noqa: E501

        self._location_type = location_type

    @property
    def battery_pct(self):
        """Gets the battery_pct of this Datapoint.  # noqa: E501

        Battery percentage level.  # noqa: E501

        :return: The battery_pct of this Datapoint.  # noqa: E501
        :rtype: float
        """
        return self._battery_voltage

    @battery_pct.setter
    def battery_pct(self, battery_pct):
        """Sets the battery_pct of this Datapoint.

        Battery percentage level.  # noqa: E501

        :param battery_pct: The battery_pct of this Datapoint.  # noqa: E501
        :type: float
        """

        self._battery_pct = battery_pct

    @property
    def battery_voltage(self):
        """Gets the battery_voltage of this Datapoint.  # noqa: E501

        Battery charge level in volts.  # noqa: E501

        :return: The battery_voltage of this Datapoint.  # noqa: E501
        :rtype: float
        """
        return self._battery_voltage

    @battery_voltage.setter
    def battery_voltage(self, battery_voltage):
        """Sets the battery_voltage of this Datapoint.

        Battery charge level in volts.  # noqa: E501

        :param battery_voltage: The battery_voltage of this Datapoint.  # noqa: E501
        :type: float
        """

        self._battery_voltage = battery_voltage

    @property
    def average_charge(self):
        """Gets the average_charge of this Datapoint.  # noqa: E501

        Internal Use. 255 indicates plugged in and charging.  # noqa: E501

        :return: The average_charge of this Datapoint.  # noqa: E501
        :rtype: float
        """
        return self._average_charge

    @average_charge.setter
    def average_charge(self, average_charge):
        """Sets the average_charge of this Datapoint.

        Internal Use. 255 indicates plugged in and charging.  # noqa: E501

        :param average_charge: The average_charge of this Datapoint.  # noqa: E501
        :type: float
        """

        self._average_charge = average_charge

    @property
    def created(self):
        """Gets the created of this Datapoint.  # noqa: E501

        Timestamp for when the datapoint was received and processed by the server  # noqa: E501

        :return: The created of this Datapoint.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Datapoint.

        Timestamp for when the datapoint was received and processed by the server  # noqa: E501

        :param created: The created of this Datapoint.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def address(self):
        """Gets the address of this Datapoint.  # noqa: E501

        A reverse geocode result for the point  # noqa: E501

        :return: The address of this Datapoint.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Datapoint.

        A reverse geocode result for the point  # noqa: E501

        :param address: The address of this Datapoint.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def alert_type(self):
        """Gets the alert_type of this Datapoint.  # noqa: E501

        Bitfield indicating what alerts where active at transmission time   Bit1(1): Freefall / Drop detected,    Bit2(2): Rotation detected,    Bit3(4): GSM jamming detected,    Bit4(8): Button was pressed,    Bit5(16): Generic Alert   # noqa: E501

        :return: The alert_type of this Datapoint.  # noqa: E501
        :rtype: float
        """
        return self._alert_type

    @alert_type.setter
    def alert_type(self, alert_type):
        """Sets the alert_type of this Datapoint.

        Bitfield indicating what alerts where active at transmission time   Bit1(1): Freefall / Drop detected,    Bit2(2): Rotation detected,    Bit3(4): GSM jamming detected,    Bit4(8): Button was pressed,    Bit5(16): Generic Alert   # noqa: E501

        :param alert_type: The alert_type of this Datapoint.  # noqa: E501
        :type: float
        """

        self._alert_type = alert_type

    @property
    def current_used(self):
        """Gets the current_used of this Datapoint.  # noqa: E501

        Current Used to send this location in microAmp Hours  # noqa: E501

        :return: The current_used of this Datapoint.  # noqa: E501
        :rtype: float
        """
        return self._current_used

    @current_used.setter
    def current_used(self, current_used):
        """Sets the current_used of this Datapoint.

        Current Used to send this location in microAmp Hours  # noqa: E501

        :param current_used: The current_used of this Datapoint.  # noqa: E501
        :type: float
        """

        self._current_used = current_used

    @property
    def gsm_signal(self):
        """Gets the gsm_signal of this Datapoint.  # noqa: E501

        GSM CSQ value  # noqa: E501

        :return: The gsm_signal of this Datapoint.  # noqa: E501
        :rtype: float
        """
        return self._gsm_signal

    @gsm_signal.setter
    def gsm_signal(self, gsm_signal):
        """Sets the gsm_signal of this Datapoint.

        GSM CSQ value  # noqa: E501

        :param gsm_signal: The gsm_signal of this Datapoint.  # noqa: E501
        :type: float
        """

        self._gsm_signal = gsm_signal

    @property
    def correlation_id(self):
        """Gets the correlation_id of this Datapoint.  # noqa: E501

        Internal use - correlation identifier  # noqa: E501

        :return: The correlation_id of this Datapoint.  # noqa: E501
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this Datapoint.

        Internal use - correlation identifier  # noqa: E501

        :param correlation_id: The correlation_id of this Datapoint.  # noqa: E501
        :type: str
        """

        self._correlation_id = correlation_id

    @property
    def id(self):
        """Gets the id of this Datapoint.  # noqa: E501


        :return: The id of this Datapoint.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Datapoint.


        :param id: The id of this Datapoint.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def device_id(self):
        """Gets the device_id of this Datapoint.  # noqa: E501


        :return: The device_id of this Datapoint.  # noqa: E501
        :rtype: float
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this Datapoint.


        :param device_id: The device_id of this Datapoint.  # noqa: E501
        :type: float
        """

        self._device_id = device_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Datapoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Datapoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Datapoint):
            return True

        return self.to_dict() != other.to_dict()
